#We will check the message size in the slot of sudden increase
#plot(df$date , df$size , xlab="Time" , ylab="msg size" , xlim=c(1421761720.05217,1421761725.59017) )
plot(df$size , df$time)
#### Curve representing the time required for sending a message  interms of size of a message using ggplot
#ggplot(df, aes(x=size, y=time)) +
#    geom_point() +
#    theme_bw()
plot(df$size, df$time, main ="time required for sending a message  in terms of message size < 1500"  ,xlab="size", ylab="time required for sending a message ", xlim=c(0,1500)  , ylim = c(0 , 100))
plot(df$size, df$time, main ="time required for sending a message  in terms of message size > 1500"  ,xlab="size", ylab="time required for sending a message ", xlim=c(1450,2000) , ylim=c( 0, 150))
checkingSize = function(size)
return(size > 1500)
df$type = as.numeric(sapply(df$size , checkingSize))
summary(df)
data=df[df$type==1,]
reg <- lm(data=df[df$type==1,],time~size)
summary(reg)
ggplot(data, aes(x=size, y=time))+ ggtitle("linear regression case of message size greater than 1500 ") +
labs(y="Time in (ms)", x = "message size (bytes)") +
geom_point(color='blue') +
geom_smooth(color='red' , method = "lm", se = FALSE)+
theme_bw() +  coord_cartesian(ylim=c(0,100))
data=df[df$type==0,]
reg <- lm(data=df[df$type==0,],time~size)
summary(reg)
ggplot(data, aes(x=size, y=time)) +
labs(y="Time in (ms)", x = "message size (bytes)") +
ggtitle("linear regression case of message size less than 1500 ")+
geom_point(color='blue') +
geom_smooth(color='red' , method = "lm", se = FALSE)+
theme_bw() + coord_cartesian(ylim=c(0,50))
ggplot(df[df$type==1,], aes(x=size)) +
geom_histogram(binwidth=10 , color ="black" ,  fill="lightblue", alpha=0.5)+theme_minimal()
ggplot(df[df$type==0,], aes(x=size)) +
geom_histogram(binwidth=20 , color ="black" ,  fill="lightblue", alpha=0.5)+theme_minimal()
ggplot(df[df$type==1,], aes(x=time)) +
geom_histogram(binwidth=10 , color ="black" ,  fill="lightblue", alpha=0.5)+theme_minimal()
ggplot(df[df$type==0,], aes(x=time)) +
geom_histogram(binwidth=20 , color ="black" ,  fill="lightblue", alpha=0.5)+theme_minimal()
# reg <- lm(df,time~size * as.factor(size))
# summary(reg)
#
# ggplot(data, aes(x=size, y=time)) +
#   geom_point(color='blue') +
#   geom_smooth(color='red' , method = "lm", se = FALSE)+
#   theme_bw()
# also plot a figure that shows how many message has time r=transmission low
# ggplot(df[df$type==0,], aes(df[df$type==1,]$size, df[df$type==0,]$time , df[df$type==1,]$size)) +
#   geom_point()
data=df[df$type==0,]
rqfit1 <- rq(time ~ size, tau = 0.25,  data = data )
rqfit2 <- rq(time ~ size, tau = 0.75,  data = data )
summary(rqfit1)
summary(rqfit2)
anova(rqfit1 , rqfit2)
ggplot(data, aes(x=size, y=time)) +
labs(y="Time in (ms)", x = "message size (bytes)") +
ggtitle("quantile regression case of message size less than 1500 ")+
geom_point(color='blue') +
geom_quantile( quantiles = 0.5 , color="red")+
coord_cartesian(ylim=c(0,2))
data
max(data[2])
data2 = data %>% group_by(size) %>% slice(which.min(time))
max(data2[2])
data2
data2=data2[data2$type==1,]
rqfit1 <- rq(time ~ size, tau = 0.25,  data = data2 )
data2=data2[data2$type==1,]
data
rqfit1 <- rq(time ~ size, tau = 0.25,  data = data2 )
data2=data2[data2$type==1,]
data2
rqfit1 <- rq(time ~ size, tau = 0.25,  data = data2 )
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.25,  data = data2 )
data
max(data[2])
data2 = data %>% group_by(size) %>% slice(which.min(time))
max(data2[2])
data2
data2
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.25,  data = data2 )
rqfit2 <- rq(time ~ size, tau = 0.75,  data = data2 )
summary(rqfit1)
summary(rqfit2)
anova(rqfit1 , rqfit2)
ggplot(data, aes(x=size, y=time)) +
labs(y="Time in (ms)", x = "message size (bytes)") +
ggtitle("quantile regression case of message size less than 1500 ")+
geom_point(color='blue') +
geom_quantile( quantiles = 0.5 , color="red")+
coord_cartesian(ylim=c(0,2))
data2
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
ggplot(data, aes(x=size, y=time)) +
labs(y="Time in (ms)", x = "message size (bytes)") +
ggtitle("quantile regression case of message size less than 1500 ")+
geom_point(color='blue') +
geom_quantile( quantiles = 0.5 , color="red")+
coord_cartesian(ylim=c(0,2))
data2
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
ggplot(data, aes(x=size, y=time)) +
labs(y="Time in (ms)", x = "message size (bytes)") +
geom_point(color='blue') +
geom_quantile( quantiles = 0.5 , color="red")+
coord_cartesian(ylim=c(0,2))
data2
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
ggplot(data, aes(x=size, y=time)) +
labs(y="Time in (ms)", x = "message size (bytes)") +
geom_point(color='blue') +
geom_quantile( quantiles = 0.5 , color="red")+
coord_cartesian(ylim=c(0,20))
data2
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
ggplot(data, aes(x=size, y=time)) +
labs(y="Time in (ms)", x = "message size (bytes)") +
geom_point(color='blue') +
geom_quantile( quantiles = 0.5 , color="red")+
coord_cartesian(ylim=c(0,1000))
data2
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
ggplot(data, aes(x=size, y=time)) +
labs(y="Time in (ms)", x = "message size (bytes)") +
geom_point(color='blue') +
geom_quantile( quantiles = 0.5 , color="red")+
coord_cartesian(ylim=c(0,100))
data2
data2=data2[data2$type==1,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
data2
data2=data2[data2$type==1,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
data2
data2=data2[data2$type==1,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
data2
data2=data2[data2$type==1,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
data2
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
data2
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
data2
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
data2
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
data2
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
data2
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
data2
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
data2
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
data
max(data[2])
data2 = data %>% group_by(size) %>% slice(which.min(time))
max(data2[2])
data2
data2
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
ggplot(data, aes(x=size, y=time)) +
labs(y="Time in (ms)", x = "message size (bytes)") +
geom_point(color='blue') +
geom_quantile( quantiles = 0.5 , color="red")+
coord_cartesian(ylim=c(0,100))
data2
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
ggplot(data, aes(x=size, y=time)) +
labs(y="Time in (ms)", x = "message size (bytes)") +
geom_point(color='blue') +
geom_quantile( quantiles = 0.5 , color="red")+
coord_cartesian(ylim=c(0,100) , xlim=c(24 ,33))
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
ggplot(data, aes(x=size, y=time)) +
labs(y="Time in (ms)", x = "message size (bytes)") +
geom_point(color='blue') +
geom_quantile( quantiles = 0.5 , color="red")+
coord_cartesian(ylim=c(0,100) , xlim=c(24 ,33))
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
summary(rqfit1)
ggplot(data, aes(x=size, y=time)) +
labs(y="Time in (ms)", x = "message size (bytes)") +
geom_point(color='blue') +
geom_quantile( quantiles = 0.5 , color="red")+
coord_cartesian(ylim=c(0,100) , xlim=c(24 ,33))
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
summary(rqfit1)
ggplot(data, aes(x=size, y=time)) +
labs(y="Time in (ms)", x = "message size (bytes)") +
geom_point(color='blue') +
geom_quantile( quantiles = 0.5 , color="red")+
coord_cartesian(ylim=c(0,100) , xlim=c(24 ,100))
knitr::opts_chunk$set(echo = TRUE)
library(stats  , warn.conflicts = FALSE)
library(SparseM  , warn.conflicts = FALSE)
library(quantreg , warn.conflicts = FALSE )
library(lubridate , warn.conflicts = FALSE)
library(dplyr , warn.conflicts = FALSE)
library(ggplot2  , warn.conflicts = FALSE)
library(tidyr , warn.conflicts = FALSE)
library(stats  , warn.conflicts = FALSE)
library(SparseM  , warn.conflicts = FALSE)
library(quantreg , warn.conflicts = FALSE )
library(lubridate , warn.conflicts = FALSE)
library(dplyr , warn.conflicts = FALSE)
library(ggplot2  , warn.conflicts = FALSE)
library(tidyr , warn.conflicts = FALSE)
library(stats  , warn.conflicts = FALSE)
library(SparseM  , warn.conflicts = FALSE)
library(quantreg , warn.conflicts = FALSE )
library(lubridate , warn.conflicts = FALSE)
library(dplyr , warn.conflicts = FALSE)
library(ggplot2  , warn.conflicts = FALSE)
library(tidyr , warn.conflicts = FALSE)
library(stats  , warn.conflicts = FALSE)
library(SparseM  , warn.conflicts = FALSE)
library(quantreg , warn.conflicts = FALSE )
library(lubridate , warn.conflicts = FALSE)
library(dplyr , warn.conflicts = FALSE)
library(ggplot2  , warn.conflicts = FALSE)
library(tidyr , warn.conflicts = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(stats  , warn.conflicts = FALSE)
library(SparseM  , warn.conflicts = FALSE)
library(quantreg , warn.conflicts = FALSE )
library(lubridate , warn.conflicts = FALSE)
library(dplyr , warn.conflicts = FALSE)
library(ggplot2  , warn.conflicts = FALSE)
library(tidyr , warn.conflicts = FALSE)
df = read.table('liglab2.log', sep=' ' , na.strings = ""  , header=F , fill = TRUE  )
df = df %>% select(V1, V2, V9)
df[10:19 , ]
df = df %>% drop_na()
line_NA  = apply(df , 1 , function(x) any(is.na(x)))
df[line_NA ,  ]
colnames(df)=c('date' ,'size' , 'time' )
convertTime = function(time)
gsub("[^0-9.]", "", time)
df$time = as.numeric(sapply(df$time , convertTime))
options(digits=16)
df$date = as.double(sapply(df$date , convertTime))
head(df)
plot(df$date , df$time , xlab="Time" , ylab="time required for sending a message " ,  xlim=c(1421761682.05217,1421770000.59017) )
plot(df$date , df$time , xlab="Time" , ylab="time required for sending a message " , xlim=c(1421761682.05217,1421761892.59017) , ylim=c( 0,20 ) )
#We will check the message size in the slot of sudden increase
#plot(df$date , df$size , xlab="Time" , ylab="msg size" , xlim=c(1421761720.05217,1421761725.59017) )
plot(df$size , df$time)
#### Curve representing the time required for sending a message  interms of size of a message using ggplot
#ggplot(df, aes(x=size, y=time)) +
#    geom_point() +
#    theme_bw()
plot(df$size, df$time, main ="time required for sending a message  in terms of message size < 1500"  ,xlab="size", ylab="time required for sending a message ", xlim=c(0,1500)  , ylim = c(0 , 100))
plot(df$size, df$time, main ="time required for sending a message  in terms of message size > 1500"  ,xlab="size", ylab="time required for sending a message ", xlim=c(1450,2000) , ylim=c( 0, 150))
checkingSize = function(size)
return(size > 1500)
df$type = as.numeric(sapply(df$size , checkingSize))
summary(df)
data=df[df$type==1,]
reg <- lm(data=df[df$type==1,],time~size)
summary(reg)
ggplot(data, aes(x=size, y=time))+ ggtitle("linear regression case of message size greater than 1500 ") +
labs(y="Time in (ms)", x = "message size (bytes)") +
geom_point(color='blue') +
geom_smooth(color='red' , method = "lm", se = FALSE)+
theme_bw() +  coord_cartesian(ylim=c(0,100))
knitr::opts_chunk$set(echo = TRUE)
library(stats  , warn.conflicts = FALSE)
library(SparseM  , warn.conflicts = FALSE)
library(quantreg , warn.conflicts = FALSE )
library(lubridate , warn.conflicts = FALSE)
library(dplyr , warn.conflicts = FALSE)
library(ggplot2  , warn.conflicts = FALSE)
library(tidyr , warn.conflicts = FALSE)
df = read.table('liglab2.log', sep=' ' , na.strings = ""  , header=F , fill = TRUE  )
df = df %>% select(V1, V2, V9)
df[10:19 , ]
df = df %>% drop_na()
line_NA  = apply(df , 1 , function(x) any(is.na(x)))
df[line_NA ,  ]
colnames(df)=c('date' ,'size' , 'time' )
convertTime = function(time)
gsub("[^0-9.]", "", time)
df$time = as.numeric(sapply(df$time , convertTime))
options(digits=16)
df$date = as.double(sapply(df$date , convertTime))
head(df)
plot(df$date , df$time , xlab="Time" , ylab="time required for sending a message " ,  xlim=c(1421761682.05217,1421770000.59017) )
plot(df$date , df$time , xlab="Time" , ylab="time required for sending a message " , xlim=c(1421761682.05217,1421761892.59017) , ylim=c( 0,20 ) )
#We will check the message size in the slot of sudden increase
#plot(df$date , df$size , xlab="Time" , ylab="msg size" , xlim=c(1421761720.05217,1421761725.59017) )
plot(df$size , df$time)
#### Curve representing the time required for sending a message  interms of size of a message using ggplot
#ggplot(df, aes(x=size, y=time)) +
#    geom_point() +
#    theme_bw()
plot(df$size, df$time, main ="time required for sending a message  in terms of message size < 1500"  ,xlab="size", ylab="time required for sending a message ", xlim=c(0,1500)  , ylim = c(0 , 100))
plot(df$size, df$time, main ="time required for sending a message  in terms of message size > 1500"  ,xlab="size", ylab="time required for sending a message ", xlim=c(1450,2000) , ylim=c( 0, 150))
checkingSize = function(size)
return(size > 1500)
df$type = as.numeric(sapply(df$size , checkingSize))
summary(df)
data=df[df$type==1,]
reg <- lm(data=df[df$type==1,],time~size)
summary(reg)
ggplot(data, aes(x=size, y=time))+ ggtitle("linear regression case of message size greater than 1500 ") +
labs(y="Time in (ms)", x = "message size (bytes)") +
geom_point(color='blue') +
geom_smooth(color='red' , method = "lm", se = FALSE)+
theme_bw() +  coord_cartesian(ylim=c(0,100))
data=df[df$type==0,]
reg <- lm(data=df[df$type==0,],time~size)
summary(reg)
ggplot(data, aes(x=size, y=time)) +
labs(y="Time in (ms)", x = "message size (bytes)") +
ggtitle("linear regression case of message size less than 1500 ")+
geom_point(color='blue') +
geom_smooth(color='red' , method = "lm", se = FALSE)+
theme_bw() + coord_cartesian(ylim=c(0,50))
ggplot(df[df$type==1,], aes(x=size)) +
geom_histogram(binwidth=10 , color ="black" ,  fill="lightblue", alpha=0.5)+theme_minimal()
ggplot(df[df$type==0,], aes(x=size)) +
geom_histogram(binwidth=20 , color ="black" ,  fill="lightblue", alpha=0.5)+theme_minimal()
ggplot(df[df$type==1,], aes(x=time)) +
geom_histogram(binwidth=10 , color ="black" ,  fill="lightblue", alpha=0.5)+theme_minimal()
ggplot(df[df$type==0,], aes(x=time)) +
geom_histogram(binwidth=20 , color ="black" ,  fill="lightblue", alpha=0.5)+theme_minimal()
# reg <- lm(df,time~size * as.factor(size))
# summary(reg)
#
# ggplot(data, aes(x=size, y=time)) +
#   geom_point(color='blue') +
#   geom_smooth(color='red' , method = "lm", se = FALSE)+
#   theme_bw()
# also plot a figure that shows how many message has time r=transmission low
# ggplot(df[df$type==0,], aes(df[df$type==1,]$size, df[df$type==0,]$time , df[df$type==1,]$size)) +
#   geom_point()
data=df[df$type==0,]
rqfit1 <- rq(time ~ size, tau = 0.25,  data = data )
rqfit2 <- rq(time ~ size, tau = 0.75,  data = data )
summary(rqfit1)
summary(rqfit2)
anova(rqfit1 , rqfit2)
ggplot(data, aes(x=size, y=time)) +
labs(y="Time in (ms)", x = "message size (bytes)") +
ggtitle("quantile regression case of message size less than 1500 ")+
geom_point(color='blue') +
geom_quantile( quantiles = 0.5 , color="red")+
coord_cartesian(ylim=c(0,2))
#data
max(data[2])
data2 = data %>% group_by(size) %>% slice(which.min(time))
max(data2[2])
#data2
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
summary(rqfit1)
ggplot(data, aes(x=size, y=time)) +
labs(y="Time in (ms)", x = "message size (bytes)") +
geom_point(color='blue') +
geom_quantile( quantiles = 0.5 , color="red")+
coord_cartesian(ylim=c(0,100) , xlim=c(24 ,100))
suppressMessages(library(stats  , warn.conflicts = FALSE))
suppressMessages(library(SparseM  , warn.conflicts = FALSE))
library(quantreg , warn.conflicts = FALSE )
library(lubridate , warn.conflicts = FALSE)
library(dplyr , warn.conflicts = FALSE)
library(ggplot2  , warn.conflicts = FALSE)
library(tidyr , warn.conflicts = FALSE)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(stats  , warn.conflicts = FALSE))
suppressMessages(library(SparseM  , warn.conflicts = FALSE))
suppressMessages(library(quantreg , warn.conflicts = FALSE ))
suppressMessages(library(lubridate , warn.conflicts = FALSE))
suppressMessages(library(dplyr , warn.conflicts = FALSE))
suppressMessages(library(ggplot2  , warn.conflicts = FALSE))
suppressMessages(library(tidyr , warn.conflicts = FALSE))
df = read.table('liglab2.log', sep=' ' , na.strings = ""  , header=F , fill = TRUE  )
df = df %>% select(V1, V2, V9)
df[10:19 , ]
df = df %>% drop_na()
line_NA  = apply(df , 1 , function(x) any(is.na(x)))
df[line_NA ,  ]
colnames(df)=c('date' ,'size' , 'time' )
convertTime = function(time)
gsub("[^0-9.]", "", time)
df$time = as.numeric(sapply(df$time , convertTime))
options(digits=16)
df$date = as.double(sapply(df$date , convertTime))
head(df)
plot(df$date , df$time , xlab="Time" , ylab="time required for sending a message " ,  xlim=c(1421761682.05217,1421770000.59017) )
plot(df$date , df$time , xlab="Time" , ylab="time required for sending a message " , xlim=c(1421761682.05217,1421761892.59017) , ylim=c( 0,20 ) )
#We will check the message size in the slot of sudden increase
#plot(df$date , df$size , xlab="Time" , ylab="msg size" , xlim=c(1421761720.05217,1421761725.59017) )
plot(df$size , df$time)
#### Curve representing the time required for sending a message  interms of size of a message using ggplot
#ggplot(df, aes(x=size, y=time)) +
#    geom_point() +
#    theme_bw()
plot(df$size, df$time, main ="time required for sending a message  in terms of message size < 1500"  ,xlab="size", ylab="time required for sending a message ", xlim=c(0,1500)  , ylim = c(0 , 100))
plot(df$size, df$time, main ="time required for sending a message  in terms of message size > 1500"  ,xlab="size", ylab="time required for sending a message ", xlim=c(1450,2000) , ylim=c( 0, 150))
checkingSize = function(size)
return(size > 1500)
df$type = as.numeric(sapply(df$size , checkingSize))
summary(df)
data=df[df$type==1,]
reg <- lm(data=df[df$type==1,],time~size)
summary(reg)
ggplot(data, aes(x=size, y=time))+ ggtitle("linear regression case of message size greater than 1500 ") +
labs(y="Time in (ms)", x = "message size (bytes)") +
geom_point(color='blue') +
geom_smooth(color='red' , method = "lm", se = FALSE)+
theme_bw() +  coord_cartesian(ylim=c(0,100))
data=df[df$type==0,]
reg <- lm(data=df[df$type==0,],time~size)
summary(reg)
ggplot(data, aes(x=size, y=time)) +
labs(y="Time in (ms)", x = "message size (bytes)") +
ggtitle("linear regression case of message size less than 1500 ")+
geom_point(color='blue') +
geom_smooth(color='red' , method = "lm", se = FALSE)+
theme_bw() + coord_cartesian(ylim=c(0,50))
ggplot(df[df$type==1,], aes(x=size)) +
geom_histogram(binwidth=10 , color ="black" ,  fill="lightblue", alpha=0.5)+theme_minimal()
ggplot(df[df$type==0,], aes(x=size)) +
geom_histogram(binwidth=20 , color ="black" ,  fill="lightblue", alpha=0.5)+theme_minimal()
ggplot(df[df$type==1,], aes(x=time)) +
geom_histogram(binwidth=10 , color ="black" ,  fill="lightblue", alpha=0.5)+theme_minimal()
ggplot(df[df$type==0,], aes(x=time)) +
geom_histogram(binwidth=20 , color ="black" ,  fill="lightblue", alpha=0.5)+theme_minimal()
# reg <- lm(df,time~size * as.factor(size))
# summary(reg)
#
# ggplot(data, aes(x=size, y=time)) +
#   geom_point(color='blue') +
#   geom_smooth(color='red' , method = "lm", se = FALSE)+
#   theme_bw()
# also plot a figure that shows how many message has time r=transmission low
# ggplot(df[df$type==0,], aes(df[df$type==1,]$size, df[df$type==0,]$time , df[df$type==1,]$size)) +
#   geom_point()
data=df[df$type==0,]
rqfit1 <- rq(time ~ size, tau = 0.25,  data = data )
rqfit2 <- rq(time ~ size, tau = 0.75,  data = data )
summary(rqfit1)
summary(rqfit2)
anova(rqfit1 , rqfit2)
ggplot(data, aes(x=size, y=time)) +
labs(y="Time in (ms)", x = "message size (bytes)") +
ggtitle("quantile regression case of message size less than 1500 ")+
geom_point(color='blue') +
geom_quantile( quantiles = 0.5 , color="red")+
coord_cartesian(ylim=c(0,2))
#data
max(data[2])
data2 = data %>% group_by(size) %>% slice(which.min(time))
max(data2[2])
#data2
data2=data2[data2$type==0,]
data2
rqfit1 <- rq(time ~ size, tau = 0.5,  data = data2 )
summary(rqfit1)
ggplot(data, aes(x=size, y=time)) +
labs(y="Time in (ms)", x = "message size (bytes)") +
geom_point(color='blue') +
geom_quantile( quantiles = 0.5 , color="red")+
coord_cartesian(ylim=c(0,100) , xlim=c(24 ,100))
